[{"id":1,"moduleId":"keadex-battisti","name":"Keadex Battisti","description":"<span class=\"text-brand1\">Keadex Battisti</span> represents the shell of Keadex, the way to describe it.<br/><br/>\n\nIt's the first Keadex released module: a <span class=\"text-brand1\">web client</span class=\"\"> based on Next.js integrated with Strapi, an <span class=\"text-brand1\">headless CMS</span> to retrieve contents and to dynamically create pages by using a low code platform.<br/><br/>\n\nThe <span class=\"text-brand1\">monorepo</span> (managed with Lerna) is made up of three packages:\n<ul>\n\t<li><span class=\"text-brand1\">cms</span>: contains the Strapi code. By default the contents are not versioned but in order to let you to run the demo with my contents, I've used the \"Strapi plugin content-export-import\" to export the contents. These are placed under <code>cms/content-snapshot</code> folder.<br/>\n<span class=\"text-brand1\">!!ATTENTION!!</span> <strong>This is not a good practice! Do not version your contents!</strong></li>\n\t<li><span class=\"text-brand1\">frontend</span>: contains the web client code</li>\n\t<li><span class=\"text-brand1\">mock</span>: contains the code of the GraphQL mock server to test and to develop the frontend without waiting for the backend integration</li>\n</ul>\n<br/>\n\nKeadex Battisti is used as a showcase of the Keadex platform but it can easily adapted to satisfy any need. The development of a CLI is planned in order to minimize the effort needed to initialize a web client with the Keadex Battisti features (check the roadmap to track the planned capabilities)<br/><br/>\n\nTo start the project:<br/>\n<ol>\n<li>clone the monorepo: <code>git clone https://github.com/keadex/keadex-battisti.git</code></li>\n<li>run <code>lerna bootstrap</code> under the root folder</li>\n<li>run <code>yarn install</code> under the <code>cms/plugins/content-export-import</code> folder</li>\n<li>check your environment variables for both the cms and frontend packages</li>\n<li>run <code>yarn build --clean</code> under the <strong>cms</strong> package.</li>\n<li>run <code>yarn develop</code> under the <strong>cms</strong> package.</li>\n<li>import into Strapi demo contents from <code>cms/contents-snapshot</code> folder by using the Strapi plugin \"content-export-import\"</li>\n<li>run <code>yarn dev</code> under the <strong>frontend</strong> package</li>\n</ol>","roadmap":"&emsp;[X] Headless CMS integration: Strapi</br>\n&emsp;[&ensp;] Automated testing</br>\n&emsp;[&ensp;] Expose parameters to configure the web client</br>\n&emsp;[&ensp;] Build a CLI to quickly initialize from scratch the web client</br>\n","type":"ApplicationArchitecture","created_by":{"id":1,"firstname":"Jack","lastname":"Simmi","username":null},"updated_by":{"id":1,"firstname":"Jack","lastname":"Simmi","username":null},"created_at":"2020-11-19T00:11:20.272Z","updated_at":"2021-11-10T17:48:39.581Z","features":[{"id":1,"title":"Typescript + SCSS","description":"Mainly languages used to build Keadex Battisti.","codeSnippet":[]},{"id":2,"title":"Lerna","description":"<a href=\"https://github.com/lerna/lerna\" target=\"_blank\">Lerna</a> is a tool that optimizes the workflow around managing multi-package repositories with git and npm.<br/><br/>\n\nLerna can also reduce the time and space requirements for numerous copies of packages in development and build environments - normally a downside of dividing a project into many separate NPM packages.","codeSnippet":[]},{"id":3,"title":"Next.js","description":"Keadex Battisti is based on <a href=\"https://nextjs.org/\" target=\"_blank\">Next.js</a> in order to combine Client Side Rendering (CSR), Server Side Rendering (SSR) and Static Site Generation (SSG).","codeSnippet":[]},{"id":4,"title":"Next SEO","description":"<a href=\"https://github.com/garmeeh/next-seo\" target=\"_blank\">Next SEO</a> is a plugin that makes managing your SEO easier in Next.js projects.","codeSnippet":[{"id":1,"filePath":"/packages/frontend/src/components/strapi-elements/strapi-seo.tsx","description":null,"code":"const StrapiSeo:FC<StrapiSeoProps> = ({ metadata }:StrapiSeoProps) => {\n  // Prevent errors if no metadata was set\n  if (!metadata) return null;\n\n  return (\n    <NextSeo\n      title={metadata.metaTitle}\n      description={metadata.metaDescription}\n      openGraph={{\n        // Title and description are mandatory\n        title: metadata.metaTitle,\n        description: metadata.metaDescription,\n        // Only include OG image if we have it\n        // Careful: if you disable image optimization in Strapi, this will break\n        ...(metadata.shareImage && {\n          images: Object.values(metadata.shareImage!.formats).map((image:any) => {\n            let ogImage: OpenGraphImages = {\n              url: getStrapiMedia(image.url)!,\n              width: image.width,\n              height: image.height,\n            };\n            return ogImage;\n          })\n        }),\n      }}\n      // Only included Twitter data if we have it\n      twitter={{\n        ...(metadata.twitterCardType && { cardType: metadata.twitterCardType }),\n        ...(metadata.twitterUsername && { cardType: metadata.twitterUsername }),\n      }}\n    />\n  );\n};","language":"tsx","fileLink":null}]},{"id":5,"title":"Strapi","description":"<a href=\"https://strapi.io/\" target=\"_blank\">Strapi</a> is a free and open-source headless CMS to build powerful content APIs with no effort.<br/>\nStrapi lets you to consume the API from any client (React, Vue, Angular), mobile apps or even IoT devices, using REST or GraphQL.<br/><br/>\n\nCheck the Keadex Battisti cms package: <a href=\"https://github.com/keadex/keadex-battisti/tree/master/packages/cms\" target=\"_blank\">/packages/cms/</a>","codeSnippet":[{"id":2,"filePath":"/packages/frontend/src/core/network/network.service.tsx","description":"<u>Example of getting Global contents from Strapi</u>:","code":"import { StrapiResponse } from \"../../model/models\";\nimport axios, { AxiosPromise, AxiosResponse } from \"axios\";\nimport { print } from \"graphql\";\nimport { GLOBAL } from \"./graphql-queries/strapi/global\";\n\ngetStrapiGlobalData = (): AxiosPromise<StrapiResponse> => {\n\treturn axios.post<StrapiResponse>(STRAPI_GRAPHQL_ENDPOINT, {\n\t\tquery: print(GLOBAL)\n\t});\n};","language":"tsx","fileLink":null}]},{"id":6,"title":"Dynamic page generation with Strapi","description":"Frontend and cms packages of Keadex Battisti are derived from <a href=\"https://github.com/strapi/strapi-starter-next-corporate\" target=\"_blank\">https://github.com/strapi/strapi-starter-next-corporate</a>, a starter developed by the Strapi team, for creating a corporate site with Strapi.<br/><br/>\n\nThe starter includes the following features:\n<ul>\n  <li>Pages creation within Strapi, no code necessary</li>\n  <li>Fully flexible page structure: design the pages you want using UI Sections</li>\n  <li>8 UI Sections out of the box: Hero, RichText, LargeVideo, Testimonials, Pricing, BottomActions, FeatureRows, FeatureColumns</li>\n  <li>Static site generation with Next.js</li>\n  <li>An integrated Preview Mode, to view your pages on a private URL before publishing them</li>\n</ul>\nCheck the demo of a page created with Strapi without writing a single line of code: <a href=\"https://keadex.io/strapi/dynamic-page-example\" target=\"_blank\">https://keadex.io/strapi/dynamic-page-example</a>","codeSnippet":[]},{"id":7,"title":"Bootstrap 4 + MDB React","description":"Frameworks for building a responsive, mobile-first site, with Material Components.<br/><br/>\n\nReferences: <br/>\n<ul>\n  <li><a href=\"https://mdbootstrap.com/docs/react/\" target=\"_blank\">MDB React</a></li>\n  <li><a href=\"https://getbootstrap.com/docs/4.4/getting-started/introduction/\" target=\"_blank\">Bootstrap 4</a></li>\n</ul>","codeSnippet":[]},{"id":8,"title":"Styled Components","description":"<a href=\"https://styled-components.com/\" target=\"_blank\">styled-components</a> uses tagged template literals to style components.<br/>\n\nIt removes the mapping between components and styles. This means that when you're defining your styles, you're actually creating a normal React component, that has your styles attached to it.","codeSnippet":[{"id":19,"filePath":"/packages/frontend/src/components/header-software-engineer/header-software-engineer.tsx","description":"","code":"const EngineerImg:any = styled.img<any>`\n  left: ${(props)=>(props.swStackWidth)?\"calc(50% - \" + (props.swStackWidth/2) + \"px)\":\"0px\"}\n`;\n \npublic render() {\n    //...\n    return (\n      //...\n      <EngineerImg id=\"engineer\" className={`animate__animated animate__fadeIn ${styles[\"header-sw-eng__engineer\"]}`} src={engineer} alt  =\"Software Engineer\" height=\"80px\" swStackWidth={(this.swStackRef.current)?this.swStackRef.current.offsetWidth:\"0\"} />\n      //...\n    );\n}","language":"tsx","fileLink":null}]},{"id":9,"title":"Redux","description":"Redux is a predictable state container for JavaScript apps.<br/><br/>\n\nIt helps you write applications that behave consistently, run in different environments (client, server, and native), and are easy to test<br/><br/>\n\nKeadex Battisti uses the following libraries to integrate Redux:<br/>\n<ul>\n  <li><a href=\"https://react-redux.js.org/\" target=\"_blank\">react-redux</a>: React bindings for React</li>\n  <li><a href=\"https://redux-actions.js.org/\" target=\"_blank\">redux-actions</a>: a utility belt for FSA-compliant actions in Redux. With helpers for both handling and creating actions it makes working with an FSA in Redux easier.</li>\n  <li><a href=\"https://github.com/reduxjs/redux-thunk\" target=\"_blank\">react-redux</a>: thunks are the recommended middleware for basic Redux side effects logic, including complex synchronous logic that needs access to the store, and simple async logic like AJAX requests.</li>\n<li><a href=\"https://github.com/kirill-konshin/next-redux-wrapper\" target=\"_blank\">Redux Wrapper for Next.js</a>: a HOC that brings Next.js and Redux together. It automatically creates the store instances for you and makes sure they all have the same state.</li>\n</ul> ","codeSnippet":[{"id":20,"filePath":"/packages/frontend/src/core/store/reducers/app.reducer.tsx","description":"<u>redux-actions example</u>:","code":"export const { setIsAppInitialized } = createActions({\n  SET_IS_APP_INITIALIZED: (isAppInitialized) => ({isAppInitialized: isAppInitialized}),\n  //...\n});\n\nexport const appReducer = handleActions<IAppState, AnyAction>(\n  {\n    [setIsAppInitialized.toString()]: (state, action) => {\n      return { ...state, isAppInitialized: action.payload.isAppInitialized};\n    }\n  },\n  getDefaultAppState()\n);","language":"typescript","fileLink":null},{"id":21,"filePath":"/packages/frontend/src/pages/about-me/index.tsx","description":"<u>Redux Wrapper for Next.js example</u>:","code":"export const getStaticProps: GetStaticProps = wrapper.getStaticProps(\n  async ({store}) => {\n    //...\n    return {\n      props:{\n        \n      },\n      revalidate: DEFAULT_REVALIDATE_SECONDS\n    }\n  }\n);","language":"typescript","fileLink":null}]},{"id":10,"title":"React Intl","description":"<a href=\"https://formatjs.io/docs/react-intl/\" target=\"_blank\">React Intl</a> is a library for the internationalization of the application.<br/><br/>","codeSnippet":[]},{"id":11,"title":"Recharts","description":"Keadex Battisti integrates <a href=\"https://recharts.org/en-US/\" target=\"_blank\">Recharts</a> to quickly build charts with decoupled, reusable React components.","codeSnippet":[{"id":3,"filePath":"/packages/frontend/src/components/experience/experience.tsx","description":null,"code":"<ResponsiveContainer>\n\t<PieChart>\n\t\t<Pie\n\t\t\tdataKey=\"usagePercentage\"\n\t\t\tdata={this.props.experience.skills.sort((a, b) => {\n\t\t\t\treturn a.name.localeCompare(b.name);\n\t\t\t})}\n\t\t\tcx={\"50%\"}\n\t\t\tcy={\"50%\"}\n\t\t\tinnerRadius={\"20%\"}\n\t\t\touterRadius={\"100%\"}\n\t\t\tpaddingAngle={0}\n\t\t\tstroke=\"#2C2C2C\"\n\t\t\tstrokeWidth=\"0.2px\"\n\t\t>\n\t\t\t{this.props.experience.skills.map((entry, index) => (\n\t\t\t\t<Cell fill={this.colors[index]} key={index} />\n\t\t\t))}\n\t\t</Pie>\n\t\t<Tooltip />\n\t</PieChart>\n</ResponsiveContainer>;","language":"tsx","fileLink":null}]},{"id":12,"title":"Force directed graph","description":"The basic idea of force-directed algorithm is that a graph is simulated by a physical system of attractive spring forces along edges and repulsive forces emanating from vertices. Then vertices will move along the direction of the combined force.<br/><br/>\n\nKeadex Battisti is integrated with <a href=\"https://github.com/vasturiano/react-force-graph\" target=\"_blank\">react-force-graph</a> in order to implement a force directed graph,","codeSnippet":[{"id":4,"filePath":"/packages/frontend/src/components/education/education.tsx","description":null,"code":"<ForceGraph2D\n\tref={forceGraphRef}\n\tgraphData={props.experienceGraph}\n\tlinkColor={() => \"#fff\"}\n\tnodeAutoColorBy=\"group\"\n\tenableNodeDrag={true}\n\tenableZoomPanInteraction={false}\n\tnodeCanvasObjectMode={() => \"replace\"}\n\tnodeCanvasObject={(node: any, ctx: any, globalScale: any) => {\n\t\tif (\n\t\t\tnode != undefined &&\n\t\t\tnode.id != undefined &&\n\t\t\tnode.x != undefined &&\n\t\t\tnode.y != undefined\n\t\t) {\n\t\t\tif (\n\t\t\t\tnode.id == \"occipital-lobe\" ||\n\t\t\t\tnode.id == \"temporal-lobe\" ||\n\t\t\t\tnode.id == \"parietal-lobe\" ||\n\t\t\t\tnode.id == \"cerebellum\" ||\n\t\t\t\tnode.id == \"frontal-lobe\"\n\t\t\t) {\n\t\t\t\tlet percentage = 85;\n\t\t\t\tif (breakpoints!.xs && breakpoints!.sm) percentage = 75;\n\t\t\t\tconst image = brain.current.get(node.id);\n\t\t\t\tif (image) {\n\t\t\t\t\tconst width = image.width - Math.ceil((image!.width * percentage) / 100);\n\t\t\t\t\tconst height = image.height * (width / image!.width);\n\t\t\t\t\tctx.drawImage(\n\t\t\t\t\t\timage,\n\t\t\t\t\t\tnode.x - width / 2,\n\t\t\t\t\t\tnode.y - height / 2,\n\t\t\t\t\t\twidth,\n\t\t\t\t\t\theight\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst fontSize = 12 / globalScale;\n\t\t\t\tctx.font = `${fontSize}px \\\"Perfect DOS VGA 437\\\"`;\n\t\t\t\tctx.textAlign = \"center\";\n\t\t\t\tctx.textBaseline = \"middle\";\n\t\t\t\tctx.fillStyle = node.color;\n\t\t\t\tvar lines = node.name.split(\"\\n\");\n\t\t\t\tvar lineheight = 8;\n\t\t\t\tfor (var i = 0; i < lines.length; i++)\n\t\t\t\t\tctx.fillText(lines[i], node.x, node.y + i * lineheight);\n\t\t\t}\n\t\t}\n\t}}\n/>;","language":"tsx","fileLink":null}]},{"id":13,"title":"CSS Animations","description":"Pure CSS animations with <a href=\"https://animate.style/\" target=\"_blank\">animate.css</a> library.","codeSnippet":[{"id":5,"filePath":"/packages/frontend/src/components/header-architect/header-architect.tsx","description":"","code":"<div id=\"game-over\" className={\"animate__animated animate__fadeOut\"}>\n    <span>Game Over</span>\n</div>","language":"tsx","fileLink":null}]},{"id":14,"title":"GreenSock Animation Platform","description":"<a href=\"https://github.com/greensock/GSAP\" target=\"_blank\">GSAP</a> is a JavaScript library for building high-performance animations that work in every major browser. Animate CSS, SVG, canvas, React, Vue, WebGL, colors, strings, motion paths, generic objects...anything JavaScript can touch!<br/><br/>\n\nIn order to integrate GSAP with React components, Keadex Battisti integrates <a href=\"https://github.com/bitworking/react-gsap\" target=\"_blank\">react-gsap</a>.","codeSnippet":[{"id":6,"filePath":"/packages/frontend/src/components/header-mobile-developer/header-mobile-developer.tsx","description":null,"code":"import { TimelineMax } from 'gsap';\n\nclass HeaderMobileDeveloper extends React.Component<ExperienceProps> {\n\n  private tlBotAndroid:TimelineMax|undefined;\n\n  constructor(props:ExperienceProps){\n    super(props);\n  }\n\n  componentDidMount(){\n    this.tlBotAndroid = new TimelineMax();\n    this.initTimeline();\n  }\n\n  private initTimeline(){    \n    this.tlBotAndroid!.to(\"#android-bot\", 1, {left:\"26%\"});\n    this.tlBotAndroid!.to(\"#apple-logo\", 1, {left:\"26%\"}, \"-=1\");\n    this.tlBotAndroid!.to(\"#android-bot\", 0.5, {bottom:\"90px\"}, \"-=0.5\");\n    this.tlBotAndroid!.to(\"#android-bot\", 0.5, {bottom:\"19px\"});\n    this.tlBotAndroid!.to(\"#apple-logo\", 0.5, {height:\"5px\"}, \"-=0.4\");\n    this.tlBotAndroid!.pause()\n  }\n  //...\n}","language":"tsx","fileLink":null}]},{"id":15,"title":"Animation on scroll","description":"In order to add some animation when the user scrolls the pages, Keadex Battisti integrates the following libraries:<br/>\n<ul>\n  <li><a href=\"https://github.com/bitworking/react-scrollmagic\" target=\"_blank\">react-scrollmagic</a>: it lets you use the <a href=\"http://scrollmagic.io/\" target=\"_blank\">ScrollMagic</a> library in React in a fully declarative way. It abstracts away the direct use of the ScrollMagic classes ScrollMagic.Controller and ScrollMagic.Scene.</li>\n  <li><a href=\"https://dbramwell.github.io/react-animate-on-scroll/#home\" target=\"_blank\">react-animate-on-scroll</a>: React component to animate elements on scroll with <a href=\"https://animate.style/\" target=\"_blank\">animate.css</a></li>\n</ul>\nWhy two libraries to do the same thing? Because ScrollMagic is a complex and heavy library and some pages of Keadex Battisti require a very simple animation on scroll. react-animate-on-scroll is easier and lighter to integrate.\n","codeSnippet":[{"id":7,"filePath":"/packages/frontend/src/pages/about-me/index.tsx","description":"<u>react-scrollmagic example</u>:","code":"<Controller\n\tcontainer={\"#\" + PAGE_ROOT_ID}\n\tglobalSceneOptions={{ triggerHook: 0 }}\n>\n\t{/* ... */}\n\t{/* PROGRESS BAR */}\n\t<Scene duration={0} pin enabled={true}>\n\t\t{(progress: any, event: any) => {\n\t\t\tprogress = this.onSceneEvent(-1, progress, event);\n\t\t\treturn (\n\t\t\t\t<div className={`${styles[\"about-me__progress-bar\"]}`}>\n\t\t\t\t\t<ProgressBar />\n\t\t\t\t</div>\n\t\t\t);\n\t\t}}\n\t</Scene>\n\t{/* ... */}\n</Controller>;","language":"tsx","fileLink":null},{"id":8,"filePath":"/packages/frontend/src/pages/index.tsx","description":"<u>react-animate-on-scroll example</u>:","code":"<ScrollAnimation\n\tscrollableParentSelector={\"#\" + PAGE_ROOT_ID}\n\tanimateIn=\"animate__fadeInUp\"\n\toffset={0}\n\tanimateOnce\n>\n\t<h1 className=\"text-brand1-dark mt-5 mt-md-0\">\n\t\t<FormattedMessage id=\"HOME.WHY_KEADEX\" />\n\t</h1>\n</ScrollAnimation>;","language":"tsx","fileLink":null}]},{"id":16,"title":" SVG paths interpolation and animation","description":"Let's say you want to animate between two SVG paths or canvas shapes in a visualization. If you plug in their coordinates or their path strings to something like d3.transition(), it might work if the shapes correspond to each other really well - for example, turning a triangle into a different triangle. But once your shapes don't really correspond, you'll get unpredictable results with weird inversions and sudden jumps.<br/><br/>\n\nKeadex Battisti integrates <a href=\"https://github.com/veltman/flubber\" target=\"_blank\">flubber</a>. The goal of this library is to provide a best-guess interpolation for any two arbitrary shapes (or collections of shapes) that results in a reasonably smooth animation, without overthinking it.","codeSnippet":[{"id":9,"filePath":"/packages/frontend/src/helper/animation-helper.ts","description":null,"code":"import { interpolateAll } from 'flubber';\n\nexport function generateMorphSVGTimelines(svgPathRef:RefObject<SVGPathElement>[], subjects:MorphSVGSubject[], options?:MorphSVGOptions) : Map<string, MorphSVGTimeline> {\n  //...\n  let interpolator:((t:number)=>string)[] = interpolateAll(subject.fromSvgPath.path, subject.toSvgPath.path, { maxSegmentLength: 25 });\n  //...\n}","language":"tsx","fileLink":null}]},{"id":17,"title":"SVG interaction","description":"In order to interact with an SVG you need to inject it into the DOM and attach some events (e.g. onClick).<br/>\n<a href=\"https://github.com/tanem/react-svg\" target=\"_blank\">react-svg</a> does the heavy lifting for you by delegating the process to <a href=\"https://github.com/tanem/svg-injector\" target=\"_blank\">@tanem/svg-injector</a>, which makes an AJAX request for the SVG and then swaps in the SVG markup inline. The async loaded SVG is also cached, so multiple uses of an SVG only require a single server request.","codeSnippet":[{"id":10,"filePath":"/packages/frontend/src/components/architecture/architecture.tsx","description":null,"code":"import { ReactSVG } from 'react-svg'\n\nfunction afterInjection(error:Error|null, svg:SVGElement|undefined):void{\n  if (svg && props.modules){\n    //...\n    let svgElem = svg.querySelector(\"#\"+module.moduleId);\n    if (svgElem){\n      svgElem.classList.add(styles[\"architecture__module\"]);\n      svgElem.addEventListener(\"click\", ()=>{\n        //...\n      });\n    }\n  }\n}\n\n//...\n\n<ReactSVG src={props.chalkboard} renumerateIRIElements={false} afterInjection={afterInjection} className={styles[\"architecture__chalkboard\"]}/>","language":"tsx","fileLink":null}]},{"id":18,"title":"Video Player","description":"Keadex Battisti integrates <a href=\"https://github.com/CookPete/react-player\" target=\"_blank\">ReactPlayer</a>, a React component for playing a variety of URLs, including file paths, YouTube, Facebook, Twitch, SoundCloud, Streamable, Vimeo, Wistia, Mixcloud, and DailyMotion.","codeSnippet":[{"id":11,"filePath":"/packages/frontend/src/pages/index.tsx","description":null,"code":"import ReactPlayer from 'react-player'\n\n//...\n<ReactPlayer url='https://youtu.be/7W7hEUGtv4U' width=\"100%\" className=\"mb-5 mb-md-0\"/>\n//...","language":"tsx","fileLink":null}]},{"id":19,"title":"Axios","description":"<a href=\"https://github.com/axios/axios\" target=\"_blank\">Axios</a> is a promise based HTTP client for the browser and node.js.<br/><br/>\nKeadex Battisti uses Axios in order to invoke \"classic\" REST APIs and to make <a href=\"https://graphql.org/\" target=\"_blank\">GraphQL</a> queries.","codeSnippet":[{"id":12,"filePath":"/packages/frontend/src/core/network/network.service.tsx","description":"<u>REST API invoke example</u>:","code":"import axios, { AxiosPromise, AxiosResponse } from \"axios\";\nimport { BaseResponse, Experience } from \"../../model/models\";\n\n__tmp_getExperiences = (): AxiosPromise<BaseResponse<Experience[]>> => {\n\treturn axios.get<BaseResponse<Experience[]>>(GET_EXPERIENCE_API);\n};","language":"tsx","fileLink":null},{"id":13,"filePath":"/packages/frontend/src/core/network/network.service.tsx","description":"<u>GraphQL query example</u>:","code":"import axios, { AxiosPromise, AxiosResponse } from \"axios\";\nimport { print } from \"graphql\";\nimport { ARCHITECTURE_MODULES } from \"./graphql-queries/strapi/architecture-module\";\nimport { BaseResponse, StrapiResponse } from \"../../model/models\";\nimport { ArchitectureModuleType } from \"../../model/autogenerated-graphql-strapi\";\n\ngetArchitectureModules = (\n\ttypes: ArchitectureModuleType[]\n): AxiosPromise<StrapiResponse> => {\n\treturn axios.post<StrapiResponse>(STRAPI_GRAPHQL_ENDPOINT, {\n\t\tquery: print(ARCHITECTURE_MODULES(types))\n\t});\n};","language":"tsx","fileLink":null}]},{"id":20,"title":"SWR","description":"<a href=\"https://swr.vercel.app/\" target=\"_blank\">SWR</a> is a React Hooks library for remote data fetching.<br/><br/>\n\nThe name “SWR” is derived from <i>stale-while-revalidate</i>, a cache invalidation strategy popularized by <a href=\"https://tools.ietf.org/html/rfc5861\" target=\"_blank\">HTTP RFC 5861</a>. SWR first returns the data from cache (stale), then sends the fetch request (revalidate), and finally comes with the up-to-date data again.<br/><br/>\n\nWith SWR, components will get a stream of data updates constantly and automatically. And the UI will be always fast and reactive.<br/><br/>\n\nKeadex Battisti uses SWR combined with Axios as data-fetching library in the fetcher function.","codeSnippet":[{"id":14,"filePath":"/packages/frontend/src/pages/_app.tsx","description":null,"code":"import NetworkService, { GET_QUOTES_API } from '../core/network/network.service';\n\nconst quotesResp = useSWR(GET_QUOTES_API, (url)=>NetworkService.getInstance().__tmp_getQuotes());\n","language":"tsx","fileLink":null}]},{"id":21,"title":"GraphQL","description":"<a href=\"https://graphql.org/\" target=\"_blank\">GraphQL</a> is a query language for APIs and a runtime for fulfilling those queries with your existing data. GraphQL provides a complete and understandable description of the data in your API, gives clients the power to ask for exactly what they need and nothing more, makes it easier to evolve APIs over time, and enables powerful developer tools.","codeSnippet":[{"id":15,"filePath":"/packages/frontend/src/core/network/graphql-queries/strapi/architecture-module.ts","description":"<u>Example of a GraphQL query invoked with Axios</u>:","code":"import gql from \"graphql-tag\";\nimport { convertToStringArray } from \"../../../../helper/array-helper\";\nimport { ArchitectureModuleType } from \"../../../../model/autogenerated-graphql-strapi\";\n\nexport const ARCHITECTURE_MODULES = (types:ArchitectureModuleType[])=> {\n\n  return gql`\n    query ArchitectureModules {\n      architectureModules(where: {type: [${convertToStringArray(types)}]}) {\n        moduleId\n        type\n        name\n        logo {\n          url\n        }\n        description\n        features {\n          id\n          title\n          description\n          codeSnippet {\n            id\n            filePath\n            fileLink\n            description\n            code\n            language\n          }\n        }\n        roadmap\n      }\n    }\n  `\n}","language":"tsx","fileLink":null}]},{"id":22,"title":"GraphQL mock server","description":"Keadex is a modular platform. This means that not all the modules are immediately available.<br/><br/>\n\nKeadex Battisti is a frontend and to let the development independent from the backend, the following tools are used to create a GraphQL mock server:<br/>\n<ul>\n  <li><a href=\"https://www.graphql-tools.com/\" target=\"_blank\">GraphQL Tools</a>: a set of utilities for faster development of GraphQL Schemas</li>\n  <li><a href=\"https://www.npmjs.com/package/apollo-server-express\" target=\"_blank\">Apollo Server Express</a>: the Express and Connect integration of GraphQL Server</li>\n</ul>","codeSnippet":[{"id":16,"filePath":"/packages/mock/server/index.ts","description":null,"code":"import express from \"express\";\nimport { ApolloServer } from \"apollo-server-express\";\nimport { loadSchemaSync } from '@graphql-tools/load';\nimport { GraphQLFileLoader } from '@graphql-tools/graphql-file-loader';\nimport { join } from \"path\";\n\n\nconst PORT = 4000;\n\nconst app = express();\n\nconst schema = loadSchemaSync(join(__dirname, 'schema.graphql'), { loaders: [new GraphQLFileLoader()] });\n\nexport default function runMockServer(mocksMap:Map<String,String>) {\n  const mocks = {\n    Query: () => ({\n      experiences: ()=> require('../mocks/'+mocksMap.get(\"experiences\")),\n      quotes: ()=> require('../mocks/'+mocksMap.get(\"quotes\")),\n      experienceGraph: ()=> require('../mocks/'+mocksMap.get(\"experienceGraph\"))\n    })\n  };\n  \n  const server = new ApolloServer({ schema,  mocks });\n  server.applyMiddleware({ app });\n  \n  app.listen({ port: PORT }, () => {\n    console.log(`Server ready at http://local.keadex.io:4000${server.graphqlPath}`)\n  })\n}","language":"typescript","fileLink":null}]},{"id":23,"title":"GraphQL Code Generator","description":"Keadex Battisti is written in Typescript and it executes GraphQL queries against mainly two systems: Strapi and the Keadex backend.<br/><br/>\n\nTo reduce the boilerplate code and quickly create Typescript types associated to the GraphQL Schemas, Keadex Battisti integrates <a href=\"https://graphql-code-generator.com/\" target=\"_blank\">GraphQL Code Generator</a>.<br/>\nBy running a npm script, it automatically creates all the Typescript types from the GraphQL Schema.","codeSnippet":[{"id":17,"filePath":"/packages/frontend/strapi-graphql-codegen.yml","description":"<u>Example of the GraphQL Code Generator configuration file for Strapi</u>:","code":"overwrite: true\nschema: \"http://localhost:1337/graphql\"\ngenerates:\n  src/model/autogenerated-graphql-strapi.ts:\n    plugins:\n      - \"typescript\"\n      - \"typescript-operations\"\n    config:\n      declarationKind: 'interface'","language":"yaml","fileLink":null},{"id":18,"filePath":"/packages/frontend/package.json","description":"<u>Example of the npm script to autogenerate Typescript types for Strapi with GraphQL Code Generator</u>:","code":"{\n   \"scripts\":{\n      \"graphql-codegen\":\"graphql-codegen --config strapi-graphql-codegen.yml\"\n   }\n}","language":"json","fileLink":null}]}],"logo":{"id":22,"name":"keadex-battisti.png","alternativeText":"","caption":"","width":2274,"height":408,"formats":{"thumbnail":{"name":"thumbnail_keadex-battisti.png","hash":"thumbnail_keadex_battisti_b07e417c77","ext":".png","mime":"image/png","width":245,"height":44,"size":4.97,"path":null,"url":"/uploads/thumbnail_keadex_battisti_b07e417c77.png"},"large":{"name":"large_keadex-battisti.png","hash":"large_keadex_battisti_b07e417c77","ext":".png","mime":"image/png","width":1000,"height":179,"size":20.23,"path":null,"url":"/uploads/large_keadex_battisti_b07e417c77.png"},"medium":{"name":"medium_keadex-battisti.png","hash":"medium_keadex_battisti_b07e417c77","ext":".png","mime":"image/png","width":750,"height":135,"size":15.05,"path":null,"url":"/uploads/medium_keadex_battisti_b07e417c77.png"},"small":{"name":"small_keadex-battisti.png","hash":"small_keadex_battisti_b07e417c77","ext":".png","mime":"image/png","width":500,"height":90,"size":10.13,"path":null,"url":"/uploads/small_keadex_battisti_b07e417c77.png"}},"hash":"keadex_battisti_b07e417c77","ext":".png","mime":"image/png","size":12.99,"url":"/uploads/keadex_battisti_b07e417c77.png","previewUrl":null,"provider":"local","provider_metadata":null,"created_by":1,"updated_by":1,"created_at":"2020-11-19T00:38:02.048Z","updated_at":"2020-11-19T00:38:02.087Z"}},{"id":2,"moduleId":"keadex-server","name":"Keadex Server","description":"Keadex infrastructure is basically based on a single VPS on which are installed all the Keadex modules.<br/><br/>\n\n<strong><span class=\"text-brand1\">!!Attention!!</span> This is not a good solution. A good infrastructure is made up of different environments (dev, test, prod), a container platform (e.g. OpenShift), an autoscaling strategy, an high availability architecture, etc.</strong><br/><br/>\n\nAll of these elements require multiple servers with a more powerful capacity or, better, the adoption of a cloud infrastructure. In other words, it's not possible to implement a good infrastructure for free.<br/><br/>\n\nThe mission of Keadex is to build Open Source applications to share with the developer community. At the moment is not planned an economic investment for the infrastructure improvements.<br/><br/>\n\n<strong>This affects the performance and the availability of the <span class=\"text-brand1\">Keadex modules</span> (e.g. <a href=\"https://keadex.io\" target=\"_blank\">keadex.io</a>).</strong>","roadmap":null,"type":"InfrastructureArchitecture","created_by":{"id":1,"firstname":"Jack","lastname":"Simmi","username":null},"updated_by":{"id":1,"firstname":"Jack","lastname":"Simmi","username":null},"created_at":"2020-11-19T00:11:20.709Z","updated_at":"2021-11-04T00:06:47.866Z","features":[],"logo":null},{"id":3,"moduleId":"keadex-einaudi","name":"Keadex Einaudi","description":"<span class=\"text-brand1\">Keadex Einaudi</span> represents the backend module of Keadex. It is based on microservices built with NestJS, Apollo and GraphQL.<br/><br/>\n\nKeadex Einaudi workspace is a <a href=\"https://docs.nestjs.com/cli/monorepo#monorepo-mode\" target=\"_blank\">NestJS Monorepo</a>, made up of different apps, one for each microservice.<br/><br/>\n\nTo start the project:<br/>\n<ol>\n<li>install and run <a href=\"https://kafka.apache.org/\" target=\"_blank\">Apache Kafka</a></li>\n<li>install and run <a href=\"https://www.mongodb.com/\" target=\"_blank\">MongoDB</a></li>\n<li>install <a href=\"https://www.apollographql.com/docs/rover/getting-started#installation-methods\" target=\"_blank\">Apollo Studio Rover CLI</a></li>\n<li>clone the repo: <code>git clone https://github.com/keadex/keadex-einaudi.git</code></li>\n<li>run <code>yarn install</code> under the root folder</li>\n<li>check your environment variables under each microservice folder (<code>/apps/*</code>)</li>\n<li>build all the microservices by running the following command under the root folder: <code>nest build MICROSERVICE_NAME_HERE</code> (e.g. <code>nest build gateway</code>)</li>\n<li>publish the GraphQL schemas into your <a href=\"https://www.apollographql.com/docs/studio/\" target=\"_blank\">Apollo Studio</a> account by running the following command under the root folder: <code>yarn publish-graph --name MICROSERVICE_NAME_HERE --port MICROSERVICE_PORT_HERE</code> (e.g. <code>yarn publish-graph --name gateway --port 3000</code>).</br>For further details about the publish schema script, check the <code>/scripts/publish-graph.ts</code> file.</br>Microservices configurations (e.g. port number) are defined in the environment variables</li>\n</ol>","roadmap":"&emsp;[&ensp;] Build a CLI to quickly initialize from scratch the backend</br>\n","type":"ApplicationArchitecture","created_by":{"id":1,"firstname":"Jack","lastname":"Simmi","username":null},"updated_by":{"id":1,"firstname":"Jack","lastname":"Simmi","username":null},"created_at":"2021-11-10T23:33:38.297Z","updated_at":"2021-11-11T15:59:27.667Z","features":[{"id":24,"title":"Microservice Architecture & GraphQL","description":"Keadex Einaudi has a Microservice Architecture and exposes APIs by using the GraphQL specification.</br>\nThe combination of microservices and GraphQL is very powerful, scalable and provides a great development experience since it is highly focused on the SoC (separation of concerns) design principle.<br/></br>\nI strongly suggest to go deeper in the Microservice Architecture and GraphQL topics by starting from the following resources:\n<ul>\n<li><a href=\"https://microservices.io/\" target=\"_blank\">https://microservices.io/</a></li>\n<li><a href=\"https://graphql.org/\" target=\"_blank\">https://graphql.org/</a></li>\n</ul> ","codeSnippet":[]},{"id":25,"title":"Database per service pattern","description":"With this design pattern each microservice keeps its persistent data private to it and accessible only via its API. A service’s transactions only involve its database.</br></br>\nUsing a database per service has the following benefits:\n<ul>\n<li>Helps ensure that the services are loosely coupled. Changes to one service’s database does not impact any other services.</li>\n<li>Each service can use the type of database that is best suited to its needs. For example, a service that does text searches could use ElasticSearch. A service that manipulates a social graph could use Neo4j.</li>\n</ul>\n</br>\nMore info <a href=\"https://microservices.io/patterns/data/database-per-service.html\" target=\"_blank\">here</a>","codeSnippet":[]},{"id":26,"title":"Event sourcing pattern","description":"Event sourcing persists the state of a business entity such an Order or a Customer as a sequence of state-changing events. Whenever the state of a business entity changes, a new event is appended to the list of events. Since saving an event is a single operation, it is inherently atomic. The application reconstructs an entity’s current state by replaying the events.</br></br>\nEvent sourcing has several benefits:\n<ul>\n<li>It solves one of the key problems in implementing an event-driven architecture and makes it possible to reliably publish events whenever state changes.</li>\n<li>Because it persists events rather than domain objects, it mostly avoids the object‑relational impedance mismatch problem.</li>\n<li>It provides a 100% reliable audit log of the changes made to a business entity</li>\n<li>It makes it possible to implement temporal queries that determine the state of an entity at any point in time.</li>\n<li>Event sourcing-based business logic consists of loosely coupled business entities that exchange events. This makes it a lot easier to migrate from a monolithic application to a microservice architecture.</li>\n</ul>\n</br>\nMore info <a href=\"https://microservices.io/patterns/data/event-sourcing.html\" target=\"_blank\">here</a>","codeSnippet":[]},{"id":27,"title":"NestJS","description":"Keadex Einaudi is based on the <a href=\"https://nestjs.com/\" target=\"_blank\">NestJS</a> framework since it helps to reduce the boilerplate code (e.g. authentication, logging, data store, etc) and follows the common patterns (e.g. microservices, decorators, testing, etc.).","codeSnippet":[]},{"id":29,"title":"Apollo Federation","description":"To get the most out of GraphQL, your organization should expose a <a href=\"https://principledgraphql.com/integrity#1-one-graph\" target=\"_blank\">single graph</a> that provides a unified interface for querying any combination of your backing data sources. However, it can be challenging to represent an enterprise-scale graph with a single, monolithic GraphQL server.</br></br>\nTo remedy this, you can use <a href=\"https://www.apollographql.com/docs/federation/\" target=\"_blank\"><strong>Apollo Federation</strong></a> to divide your graph's implementation across multiple back-end services (called <strong>subgraphs</strong>).</br></br>\nUnlike other distributed GraphQL architectures (such as schema stitching), Apollo Federation uses a declarative programming model that enables each subgraph to implement <i>only</i> the part of your composed <strong>supergraph</strong> that it's responsible for.","codeSnippet":[{"id":23,"filePath":"/apps/experience/src/experience.module.ts","description":"<u>Setting up Apollo Federation with NestJS in the Experience microservice</u>:","code":"GraphQLFederationModule.forRoot({\n      autoSchemaFile: join(\n        process.cwd(),\n        'apps/experience/src/_autogenerated/schema.gql',\n      ),\n      playground: true,\n      sortSchema: true,\n      debug: true,\n    }),","language":"tsx","fileLink":null}]},{"id":28,"title":"Apollo GraphQL Gateway","description":"When using the <a href=\"https://www.apollographql.com/docs/federation/\" target=\"_blank\">Apollo Federation</a> it's important to configure a <a href=\"https://www.apollographql.com/docs/federation/gateway/\" target=\"_blank\">gateway</a> to sit in front of your subgraphs. The gateway executes incoming operations across those subgraphs.</br></br>\nThe <code>@apollo/gateway</code> package extends Apollo Server's functionality, enabling it to act as a gateway for an Apollo Federation architecture.","codeSnippet":[{"id":22,"filePath":"/apps/gateway/src/gateway.module.ts","description":"<u>Apollo Gateway initialization with NestJS</u>:","code":"    GraphQLGatewayModule.forRootAsync({\n      useFactory: async () => ({\n        gateway: {},\n        server: {\n          introspection: true,\n          context: ({ req }) => ({\n            jwt: req.headers.authorization,\n          }),\n        },\n      }),","language":"tsx","fileLink":null}]},{"id":30,"title":"Managed Federation","description":"Apollo provides free <strong>managed federation</strong> support for graphs that use Apollo Federation.</br></br>\n\nWith managed federation, your gateway is no longer responsible for fetching schemas from your subgraphs on startup. Instead, your subgraphs push their schemas to the Apollo schema registry, which verifies that they successfully <strong>compose</strong> into a federated schema.</br></br>\n\nOn composition success, Studio updates your graph's latest configuration, which is available at a special endpoint (called the <strong>uplink</strong>) that your gateway regularly polls for updates.</br></br>\n\nMore info <a href=\"https://www.apollographql.com/docs/federation/managed-federation/overview/\" target=\"_blank\">here</a>","codeSnippet":[]},{"id":31,"title":"Mongoose","description":"For integrating with the MongoDB database, Nest supports <a href=\"https://mongoosejs.com/\" target=\"_blank\">Mongoose</a>, the most popular MongoDB object modeling tool, using the dedicated <code>@nestjs/mongoose package</code>.</br></br>\n\nMore info <a href=\"https://docs.nestjs.com/techniques/mongodb\" target=\"_blank\">here</a>","codeSnippet":[{"id":24,"filePath":"/apps/experience/src/experience.module.ts","description":"<u>Mongoose module initialization for the Experience microservice</u>:","code":"    MongooseModule.forRootAsync({\n      useFactory: async (configService: ConfigService) => {\n        return {\n          uri: configService.get(CONFIG_KEYS.DATABASE_EXPERIENCE),\n          useFindAndModify: false,\n        };\n      },\n      inject: [ConfigService],\n    }),\n    MongooseModule.forFeature([\n      { name: Experience.name, schema: ExperienceSchema },\n    ]),","language":"tsx","fileLink":null},{"id":25,"filePath":"/apps/experience/src/models/experience.model.ts","description":"<u>Example of a Mongoose model</u>:","code":"import { ObjectType, Directive, Field } from '@nestjs/graphql';\nimport { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Task } from './task.model';\nimport { Document, Schema as MongooseSchema } from 'mongoose';\nimport { Sector } from './sector.model';\n\n@Schema()\n@ObjectType()\n@Directive('@key(fields: \"_id\")')\nexport class Experience {\n  @Field(() => String)\n  _id: MongooseSchema.Types.ObjectId;\n\n  @Field()\n  @Prop()\n  role: string;\n\n  @Field()\n  @Prop()\n  from: string;\n\n  @Field({ nullable: true })\n  @Prop()\n  to?: string;\n\n  @Field({ nullable: true })\n  @Prop()\n  avatarFileName: string;\n\n  @Field(() => [Task])\n  @Prop({ type: [MongooseSchema.Types.ObjectId], ref: Task.name })\n  tasks: MongooseSchema.Types.ObjectId[] | Task[];\n\n  @Field(() => [Sector])\n  @Prop({ type: [MongooseSchema.Types.ObjectId], ref: Sector.name })\n  sectors: MongooseSchema.Types.ObjectId[] | Sector[];\n}\n\nexport type ExperienceDocument = Experience & Document;\n\nexport const ExperienceSchema = SchemaFactory.createForClass(Experience);\n","language":"tsx","fileLink":null},{"id":26,"filePath":"/apps/experience/src/services/experience/experience.service.ts","description":"<u>Example of a CRUD operation with Mongoose</u>:","code":"import { Inject, Injectable } from '@nestjs/common';\nimport { ClientProxy } from '@nestjs/microservices';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model, Schema as MongooseSchema } from 'mongoose';\nimport { EVENTS, SERVICES_NAMES } from '../../constants';\nimport {\n  CreateExperienceDto,\n  ListExperienceDto,\n  UpdateExperienceDto,\n} from '../../dto/experience.dto';\nimport { Experience, ExperienceDocument } from '../../models/experience.model';\n\n@Injectable()\nexport class ExperienceService {\n  constructor(\n    @InjectModel(Experience.name)\n    private experienceModel: Model<ExperienceDocument>,\n    @Inject(SERVICES_NAMES.EXPERIENCE_SERVICE) private client: ClientProxy,\n  ) {}\n\n  findById(_id: MongooseSchema.Types.ObjectId) {\n    return this.experienceModel\n      .findById(_id)\n      .populate(['tasks', 'sectors'])\n      .exec();\n  }\n}","language":"tsx","fileLink":null}]},{"id":32,"title":"Apache Kafka","description":"In order to implement the <strong>Event Sourcing</strong> pattern, <a href=\"https://kafka.apache.org/\" target=\"_blank\">Apache Kafka</a> has been used for the event streaming.</br></br>\n\nKafka combines three key capabilities so you can implement your use cases for event streaming end-to-end with a single battle-tested solution:\n<ul>\n<li>To publish (write) and subscribe to (read) streams of events, including continuous import/export of your data from other systems.</li>\n<li>To store streams of events durably and reliably for as long as you want.</li>\n<li>To process streams of events as they occur or retrospectively.</li>\n</ul>\nThe Kafka project aims to provide a unified, high-throughput, low-latency platform for handling real-time data feeds. It integrates very well with Apache Storm and Spark for real-time streaming data analysis.</br></br>\nMore info <a href=\"https://kafka.apache.org/documentation/\" target=\"_blank\">here</a>","codeSnippet":[{"id":27,"filePath":"/apps/experience/src/main.ts","description":"Like other Nest microservice transport layer implementations, you select the Kafka transporter mechanism using the <code>transport</code> property of the options object passed to the <code>createMicroservice()</code> method, along with an optional <code>options</code> property, as shown in the Experience microservice example below (more info <a href=\"https://docs.nestjs.com/microservices/kafka\" target=\"_blank\">here</a>):","code":"app.connectMicroservice<MicroserviceOptions>({\n    transport: Transport.KAFKA,\n    options: {\n      client: {\n        clientId: 'experience', // experience-server\n        brokers: [\n          process.env.EXPERIENCE_MS_KAFKA_HOST +\n            ':' +\n            process.env.EXPERIENCE_MS_KAFKA_PORT,\n        ],\n      },\n      consumer: {\n        groupId: 'experience-consumer', // experience-consumer-server\n      },\n    },\n  });","language":"tsx","fileLink":null}]},{"id":33,"title":"Winston & Winston Daily Rotate File","description":"Nest comes with a built-in text-based <a href=\"https://docs.nestjs.com/techniques/logger\" target=\"_blank\">logger</a>which is used during application bootstrapping and several other circumstances such as displaying caught exceptions (i.e., system logging). This functionality is provided via the <code>Logger</code> class in the <code>@nestjs/common</code> package.</br></br>\n\nFor more advanced logging functionality, Einaudi uses <a href=\"https://github.com/winstonjs/winston\" target=\"_blank\">Winston</a> to implement a completely custom, production grade logging system.</br></br>\n\nIn addition to this, Einaudi uses the <a href=\"https://github.com/winstonjs/winston-daily-rotate-file\" target=\"_blank\">winston-daily-rotate-file</a> transport which logs to a rotating file.\n","codeSnippet":[{"id":28,"filePath":"/apps/experience/src/main.ts","description":"<u>Example of a NestJS logger configuration for the Experience microservice</u>: ","code":"const app = await NestFactory.create(ExperienceModule, {\n    logger: WinstonModule.createLogger({\n      level: process.env.LOG_LEVEL,\n      transports: [\n        new winston.transports.Console({\n          format: winston.format.combine(\n            winston.format.timestamp(),\n            winston.format.ms(),\n            nestWinstonModuleUtilities.format.nestLike(),\n          ),\n        }),\n        new DailyRotateFile({\n          dirname: process.env.LOG_DIR_NAME,\n          filename: process.env.LOG_FILE_NAME,\n          datePattern: process.env.LOG_FILE_NAME_DATE_PATTERN,\n          format: winston.format.combine(\n            winston.format.timestamp({\n              format: process.env.LOG_DATE_PATTERN,\n            }),\n            winston.format.printf(\n              (info) =>\n                `${[info.timestamp]} ${info.level.toUpperCase()}: [${\n                  info.context ? info.context : `--`\n                }] ${info.message}`,\n            ),\n          ),\n        }),\n      ],\n    }),\n  });","language":"tsx","fileLink":null}]},{"id":34,"title":"Quotable","description":"To show random quotes in the Keadex Battisti menu, Einaudi uses <a href=\"https://github.com/lukePeavey/quotable\" target=\"_blank\">Quotable</a>, a free, open source quotations REST API. It was originally built as part of a <a href=\"https://www.freecodecamp.org/\" target=\"_blank\">FreeCodeCamp </a> project. The database includes over 2000 quotes by 900 authors.</br></br>\n\nEinaudi wraps the Quotable <strong>REST</strong> APIs in a <strong>GraphQL resolver</strong> into the dedicated Quote microservice by using the <a href=\"https://www.apollographql.com/docs/apollo-server/data/data-sources/\" target=\"_blank\">data sources</a> feature of Apollo Server. In this way the frontend can retrieve the quotes by using GraphQL.","codeSnippet":[{"id":29,"filePath":"/apps/quote/src/datasources/quotes.api.ts","description":"Declaration of the quote <a href=\"https://www.apollographql.com/docs/apollo-server/data/data-sources/#restdatasource-reference\" target=\"_blank\">RESTDataSource</a> in the Quote microservice:","code":"import { RESTDataSource } from 'apollo-datasource-rest';\nimport { Quotes } from '../models/quotes.model';\n\nexport class QuotesAPI extends RESTDataSource {\n  constructor() {\n    super();\n    // Sets the base URL for the REST API\n    this.baseURL = 'https://api.quotable.io/';\n  }\n\n  async getRandomQuotes() {\n    const quotes: Quotes = await this.get(`quotes`);\n    const randomPage: number =\n      Math.floor(Math.random() * quotes.totalPages) + 1;\n    return this.get(`quotes?page=${randomPage}`);\n  }\n}\n","language":"tsx","fileLink":null},{"id":30,"filePath":"/apps/quote/src/quote.module.ts","description":"Attaching the data source to the GraphQL module with Nest:","code":"GraphQLFederationModule.forRoot({\n      dataSources: () => ({\n        quotesAPI: new QuotesAPI(),\n      })\n    }),","language":"tsx","fileLink":null},{"id":31,"filePath":"/apps/quote/src/resolvers/quote/quote.resolver.ts","description":"Use of the Quote data source inside the resolver to retrieve the quotes:","code":"import { Resolver, Query, Context } from '@nestjs/graphql';\nimport { Quote } from '../../models/quote.model';\nimport { QuoteDataSources } from '../../models/datasources.model';\nimport { Quotes } from '../../models/quotes.model';\nimport { Roles, RoleType, JwtAuthGuard } from '@keadex/corelib';\nimport { UseGuards } from '@nestjs/common';\n\n@Resolver(() => Quote)\nexport class QuoteResolver {\n  @Query(() => [Quote], { name: 'randomQuotes' })\n  @Roles(RoleType.GUEST)\n  @UseGuards(JwtAuthGuard)\n  async getRandomQuotes(@Context('dataSources') dataSources: QuoteDataSources) {\n    const quotes: Quotes = await dataSources.quotesAPI.getRandomQuotes();\n    return quotes.results;\n  }\n}\n","language":"tsx","fileLink":null}]},{"id":35,"title":"Passport & JWT","description":"<a href=\"https://github.com/jaredhanson/passport\" target=\"_blank\">Passport</a> is the most popular node.js authentication library, well-known by the community and successfully used in many production applications. It's straightforward to integrate this library with a Nest application using the <code>@nestjs/passport</code> module. At a high level, Passport executes a series of steps to:\n<ul>\n<li>Authenticate a user by verifying their \"credentials\" (such as username/password, JSON Web Token (<a href=\"https://jwt.io/\" target=\"_blank\">JWT</a>), or identity token from an Identity Provider)</li>\n<li>Manage authenticated state (by issuing a portable token, such as a JWT, or creating an Express session)</li>\n<li>Attach information about the authenticated user to the <code>Request</code> object for further use in route handlers</li>\n</ul>\n</br>\nEinaudi implements the <strong>authentication</strong> module inside the Gateway microservice. Check the <a href=\"https://microservices.io/patterns/security/access-token.html\" target=\"_blank\">access token pattern</a>.</br>\nEach service, instead, is responsible for the <strong>authorization</strong> step starting from the JWT passed by the gateway, that is the protection of the exposed resources (e.g. GraphQL resolvers).</br></br>\n\nCheck the Nest <a href=\"https://docs.nestjs.com/security/authentication\" target=\"_blank\">authentication</a> and <a href=\"https://docs.nestjs.com/security/authorization\" target=\"_blank\">authorization</a> documentation for further details.","codeSnippet":[{"id":32,"filePath":"/apps/gateway/src/services/auth/auth.service.ts","description":"<u>Definition of the Gateway service to authenticate/validate the client</u>:","code":"import { Injectable } from '@nestjs/common';\nimport { ClientService } from '../client/client.service';\nimport { JwtService } from '@nestjs/jwt';\nimport { Client } from '../../models/client.model';\nimport { Role } from '../../models/role.model';\nimport { GUEST_USER_APIKEY } from '../../constants';\nimport { RoleType } from '@keadex/corelib';\n\nexport interface JWTPayload {\n  sub: string;\n  roles: Role[];\n}\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private clientService: ClientService,\n    private jwtService: JwtService,\n  ) {}\n\n  async validateClient(apiKey: string): Promise<Client | null> {\n    if (apiKey === GUEST_USER_APIKEY) {\n      const client: Client = {\n        roles: [{ name: RoleType.GUEST }],\n      };\n      return client;\n    }\n    const client = await this.clientService.findByApiKey(apiKey);\n    if (client) {\n      return client.toObject() as Client;\n    }\n    return null;\n  }\n\n  async login(client: Client) {\n    const payload: JWTPayload = {\n      ...(client.apiKey != GUEST_USER_APIKEY && { sub: client.apiKey }),\n      roles: client.roles.map((role) => {\n        const { _id, __v, ...result } = role;\n        return result;\n      }),\n    };\n    return { accessToken: this.jwtService.sign(payload) };\n  }\n}\n","language":"tsx","fileLink":null},{"id":33,"filePath":"/libs/corelib/src/security/passport/jwt.guard.ts","description":"<u>Implementation of the Passport JWT AuthGuard used by all the services to authorize the client</u>: ","code":"import {\n  ExecutionContext,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { GqlExecutionContext } from '@nestjs/graphql';\nimport { AuthGuard } from '@nestjs/passport';\nimport { RoleType } from '../role-type.enum';\nimport { Role } from './jwt.strategy';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n  constructor(private reflector: Reflector) {\n    super();\n  }\n\n  getRequest(context: ExecutionContext) {\n    const ctx = GqlExecutionContext.create(context);\n    return ctx.getContext().req;\n  }\n\n  handleRequest(err, jwtPayload, info, context) {\n    const roles = this.reflector.get<string[]>('roles', context.getHandler());\n    // You can throw an exception based on either \"info\" or \"err\" arguments\n    if (err || !jwtPayload || !isGranted(roles, jwtPayload.roles)) {\n      throw err || new UnauthorizedException();\n    }\n    return jwtPayload;\n  }\n}\n\nfunction isGranted(apiRoles: string[], userRoles: Role[]) {\n  if (!Array.isArray(apiRoles) || !apiRoles.length) return true; //no restrictions on the API -> always granted\n  if (!Array.isArray(userRoles) || !userRoles.length) return false; //no roles associated to the user -> never granted\n  const userRolesString = userRoles.map((role) => role.name);\n  if (userRolesString.indexOf(RoleType.ADMIN) != -1) return true; //admin can do everything -> always granted\n\n  //check if the user has the role requested by the API\n  const intersection = apiRoles.filter((value) =>\n    userRolesString.includes(value),\n  );\n  return intersection.length != 0;\n}\n","language":"tsx","fileLink":null},{"id":34,"filePath":"/apps/experience/src/resolvers/experience/experience.resolver.ts","description":"<u>Example of how the Experience microservice protects some GraphQL operations</u>:","code":"  @Query(() => [Experience], { name: 'experiences' })\n  @Roles(RoleType.GUEST)\n  @UseGuards(JwtAuthGuard)\n  async getExperiences(\n    @Args('filters', { nullable: true }) filters?: ListExperienceDto,\n  ) {\n    return this.experienceService.list(filters);\n  }\n\n  @Mutation(() => Experience)\n  @Roles(RoleType.ADMIN)\n  @UseGuards(JwtAuthGuard)\n  async createExperience(@Args('payload') payload: CreateExperienceDto) {\n    return this.experienceService.create(payload);\n  }","language":"tsx","fileLink":null}]},{"id":36,"title":"GitHub Actions","description":"Einaudi uses <a href=\"https://github.com/features/actions\" target=\"_blank\">GitHub Actions</a> to automate the software workflow from GitHub.</br></br>\n\nEinaudi workflow builds and deploys the microservices on a self managed cloud VPS on which are running different Node.js servers (check the <a href=\"https://keadex.io/kealab\" target=\"_blank\">Keadex infrastructure documentation</a>).","codeSnippet":[]},{"id":37,"title":"PM2","description":"All the Node.js microservices are managed in the Keadex server with <a href=\"https://pm2.keymetrics.io/\" target=\"_blank\">PM2</a>, a daemon process manager that helps you to manage and keep your application online.","codeSnippet":[]}],"logo":{"id":26,"name":"keadex-einaudi.png","alternativeText":"","caption":"","width":1137,"height":205,"formats":{"thumbnail":{"name":"thumbnail_keadex-einaudi.png","hash":"thumbnail_keadex_einaudi_60e3fbe1fc","ext":".png","mime":"image/png","width":245,"height":44,"size":4.75,"path":null,"url":"/uploads/thumbnail_keadex_einaudi_60e3fbe1fc.png"},"large":{"name":"large_keadex-einaudi.png","hash":"large_keadex_einaudi_60e3fbe1fc","ext":".png","mime":"image/png","width":1000,"height":180,"size":18.85,"path":null,"url":"/uploads/large_keadex_einaudi_60e3fbe1fc.png"},"medium":{"name":"medium_keadex-einaudi.png","hash":"medium_keadex_einaudi_60e3fbe1fc","ext":".png","mime":"image/png","width":750,"height":135,"size":14.23,"path":null,"url":"/uploads/medium_keadex_einaudi_60e3fbe1fc.png"},"small":{"name":"small_keadex-einaudi.png","hash":"small_keadex_einaudi_60e3fbe1fc","ext":".png","mime":"image/png","width":500,"height":90,"size":9.53,"path":null,"url":"/uploads/small_keadex_einaudi_60e3fbe1fc.png"}},"hash":"keadex_einaudi_60e3fbe1fc","ext":".png","mime":"image/png","size":5.18,"url":"/uploads/keadex_einaudi_60e3fbe1fc.png","previewUrl":null,"provider":"local","provider_metadata":null,"created_by":1,"updated_by":1,"created_at":"2021-11-10T15:04:16.217Z","updated_at":"2021-11-10T15:04:16.238Z"}}]